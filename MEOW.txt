class Client(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix='.', intents=discord.Intents().all())

class Buttons(discord.ui.View):
    def __init__(self) -> None:
        super().__init__(timeout=None)
        self.expression = ""
  
    async def add(self, interaction: discord.Interaction, symbol):
        self.expression += symbol
        await self.update(interaction)

    async def update(self, interaction: discord.Interaction):
        await interaction.response.defer()
        fixed_length = 28
        wrapped_expression = "\n".join([self.expression[i:i + fixed_length] for i in range(0, len(self.expression), fixed_length)])
        description = f"```\n{wrapped_expression.ljust(fixed_length)}\n```"
        embed = discord.Embed(title="계산기", description=description, color=0x84868A)
        await interaction.message.edit(embed=embed)

    async def solve(self, interaction: discord.Interaction):
        try:
            self.expression = str(eval(self.expression))
        except:
            await interaction.response.send_message("유효하지 않은 식입니다.", ephemeral=True)
            return
        await self.update(interaction)
        self.expression = ""

    async def cleared(self, interaction: discord.Interaction):
        self.expression = ""
        await self.update(interaction)

    @discord.ui.button(label="c", style=discord.ButtonStyle.red, row=0)
    async def clear(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.cleared(interaction)

    @discord.ui.button(label="(", style=discord.ButtonStyle.blurple, row=0)
    async def p1(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "(")

    @discord.ui.button(label=")", style=discord.ButtonStyle.blurple, row=0)
    async def p2(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, ")")

    @discord.ui.button(label="÷", style=discord.ButtonStyle.blurple, row=0)
    async def divide(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "/")

    @discord.ui.button(label="7", style=discord.ButtonStyle.grey, row=1)
    async def s7(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "7")

    @discord.ui.button(label="8", style=discord.ButtonStyle.grey, row=1)
    async def s8(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "8")

    @discord.ui.button(label="9", style=discord.ButtonStyle.grey, row=1)
    async def s9(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "9")

    @discord.ui.button(label="x", style=discord.ButtonStyle.blurple, row=1)
    async def multi(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "*")

    @discord.ui.button(label="4", style=discord.ButtonStyle.grey, row=2)
    async def s4(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "4")

    @discord.ui.button(label="5", style=discord.ButtonStyle.grey, row=2)
    async def s5(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "5")

    @discord.ui.button(label="6", style=discord.ButtonStyle.grey, row=2)
    async def s6(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "6")

    @discord.ui.button(label="-", style=discord.ButtonStyle.blurple, row=2)
    async def minus(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "-")

    @discord.ui.button(label="1", style=discord.ButtonStyle.grey, row=3)
    async def s1(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "1")

    @discord.ui.button(label="2", style=discord.ButtonStyle.grey, row=3)
    async def s2(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "2")

    @discord.ui.button(label="3", style=discord.ButtonStyle.grey, row=3)
    async def s3(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "3")

    @discord.ui.button(label="+", style=discord.ButtonStyle.blurple, row=3)
    async def plus(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "+")

    @discord.ui.button(label=".", style=discord.ButtonStyle.grey, row=4)
    async def decimal(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, ".")

    @discord.ui.button(label="0", style=discord.ButtonStyle.grey, row=4)
    async def s0(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.add(interaction, "0")

    @discord.ui.button(label="⇦", style=discord.ButtonStyle.grey, row=4)
    async def backspace(self, interaction: discord.Interaction, Button: discord.ui.Button):
        if self.expression:
            self.expression = self.expression[:-1] 
        await self.update(interaction)

    @discord.ui.button(label="=", style=discord.ButtonStyle.green, row=4)
    async def equals(self, interaction: discord.Interaction, Button: discord.ui.Button):
        await self.solve(interaction)

@bot.tree.command(name="calculator", description="깔끔한 계산기")
async def calculator(interaction: discord.Interaction):
    embed = discord.Embed(title="계산기", description="```\n                            \n```", color=0x84868A)
    await interaction.response.send_message(embed=embed, view=Buttons())
